import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';
import { collection, doc, onSnapshot, serverTimestamp, setDoc } from 'firebase/firestore';
import { useAuth } from '../hooks/useAuth';
import { db } from '../firebase';

const WatchedVideosContext = createContext();

export const useWatchedVideos = () => {
  const ctx = useContext(WatchedVideosContext);
  if (!ctx) throw new Error('useWatchedVideos must be used within WatchedVideosProvider');
  return ctx;
};

export const WatchedVideosProvider = ({ children }) => {
  const { user: currentUser } = useAuth();
  const [watchedMap, setWatchedMap] = useState({}); // { videoId: { watchCount, certified, lastWatchedAt, watchedAt } }

  // Firestore Ïã§ÏãúÍ∞Ñ Î¶¨Ïä§ÎÑà
  useEffect(() => {
    if (!currentUser) {
      console.log('üîç [WatchedVideosContext] ÏÇ¨Ïö©Ïûê ÏóÜÏùå - watchedMap Ï¥àÍ∏∞Ìôî');
      setWatchedMap({});
      return;
    }

    console.log('üîç [WatchedVideosContext] Ïã§ÏãúÍ∞Ñ Î¶¨Ïä§ÎÑà ÏãúÏûë:', {
      userId: currentUser.uid,
      collectionPath: `users/${currentUser.uid}/watchedVideos`
    });

    const colRef = collection(db, 'users', currentUser.uid, 'watchedVideos');
    const unsub = onSnapshot(colRef, (snap) => {
      console.log('üìä [WatchedVideosContext] Firebase Ïä§ÎÉÖÏÉ∑:', {
        docsCount: snap.docs.length,
        changes: snap.docChanges().map(change => ({
          type: change.type,
          id: change.doc.id,
          data: change.doc.data()
        }))
      });

      const map = {};
      snap.forEach((docSnap) => {
        map[docSnap.id] = docSnap.data();
      });
      
      console.log('‚úÖ [WatchedVideosContext] watchedMap ÏóÖÎç∞Ïù¥Ìä∏:', map);
      setWatchedMap(map);
    }, (error) => {
      console.error('‚ùå [WatchedVideosContext] Firebase Î¶¨Ïä§ÎÑà Ïò§Î•ò:', error);
    });
    
    return () => {
      console.log('üîÑ [WatchedVideosContext] Î¶¨Ïä§ÎÑà Ï†ïÎ¶¨');
      unsub();
    };
  }, [currentUser]);

  // Ìó¨Ìçº: ÏóÖÏÑúÌä∏
  const upsertWatched = useCallback(async (videoId, data) => {
    if (!currentUser || !videoId) {
      console.warn('‚ö†Ô∏è [WatchedVideosContext] upsertWatched Ïã§Ìå® - ÏÇ¨Ïö©Ïûê ÎòêÎäî videoId ÏóÜÏùå:', { currentUser: !!currentUser, videoId });
      return;
    }
    
    const docRef = doc(db, 'users', currentUser.uid, 'watchedVideos', videoId);
    const updateData = { ...data, updatedAt: serverTimestamp() };
    
    console.log('üîÑ [WatchedVideosContext] Firebase Ï†ÄÏû• ÏãúÏûë:', {
      userId: currentUser.uid,
      videoId,
      path: `users/${currentUser.uid}/watchedVideos/${videoId}`,
      data: updateData
    });
    
    // üìå 1) ÎÇôÍ¥ÄÏ†Å Î°úÏª¨ ÏóÖÎç∞Ïù¥Ìä∏ (Î≤ÑÌäº Ï¶âÏãú ÎπÑÌôúÏÑ±Ìôî Îì± UI Î∞òÏòÅ)
    setWatchedMap(prev => ({
      ...prev,
      [videoId]: {
        ...(prev[videoId] || {}),
        ...data,
        updatedAt: Date.now(), // Î°úÏª¨ ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ
      }
    }));

    try {
      await setDoc(docRef, updateData, { merge: true });
      console.log('‚úÖ [WatchedVideosContext] Firebase Ï†ÄÏû• ÏôÑÎ£å:', { videoId, data: updateData });
    } catch (error) {
      console.error('‚ùå [WatchedVideosContext] Firebase Ï†ÄÏû• Ïã§Ìå®:', error);
      throw error;
    }
  }, [currentUser]);

  const incrementWatchCount = async (videoId) => {
    const prev = watchedMap[videoId]?.watchCount || 0;
    const newCount = prev + 1;
    console.log('üî¢ [WatchedVideosContext] ÏãúÏ≤≠ ÌöüÏàò Ï¶ùÍ∞Ä:', { videoId, prev, newCount });
    await upsertWatched(videoId, { watchCount: newCount });
  };

  const setCertified = async (videoId, certified = true) => {
    console.log('‚úÖ [WatchedVideosContext] Ïù∏Ï¶ù ÏÉÅÌÉú ÏÑ§Ï†ï:', { videoId, certified });
    
    // ÏãúÏ≤≠ ÏôÑÎ£å Ïãú ÌòÑÏû¨ ÏãúÍ∞Ñ Ï†ÄÏû•
    const updateData = { certified };
    if (certified) {
      updateData.watchedAt = Date.now(); // ÏãúÏ≤≠ ÏôÑÎ£å ÏãúÍ∞Ñ Ï†ÄÏû• (Î∞ÄÎ¶¨Ï¥à)
      updateData.lastWatchedAt = serverTimestamp(); // Firebase ÏÑúÎ≤Ñ ÏãúÍ∞ÑÎèÑ Ï†ÄÏû•
      console.log('üïí [WatchedVideosContext] ÏãúÏ≤≠ ÏôÑÎ£å ÏãúÍ∞Ñ Ï†ÄÏû•:', updateData.watchedAt);
    }
    
    await upsertWatched(videoId, updateData);
  };

  const getWatchInfo = (videoId) => {
    const info = watchedMap[videoId] || { watchCount: 0, certified: false, watchedAt: null };
    console.log('üìñ [WatchedVideosContext] ÏãúÏ≤≠ Ï†ïÎ≥¥ Ï°∞Ìöå:', { videoId, info });
    return info;
  };

  // 1ÏãúÍ∞Ñ Ïû¨ÏãúÏ≤≠ Ï†úÌïú Ï≤¥ÌÅ¨
  const canRewatch = (videoId) => {
    const info = watchedMap[videoId];
    if (!info || !info.certified || !info.watchedAt) {
      return true; // ÏãúÏ≤≠Ìïú Ï†Å ÏóÜÏúºÎ©¥ ÏãúÏ≤≠ Í∞ÄÎä•
    }
    
    const oneHourInMs = 60 * 60 * 1000; // 1ÏãúÍ∞Ñ = 60Î∂Ñ * 60Ï¥à * 1000Î∞ÄÎ¶¨Ï¥à
    const timePassed = Date.now() - info.watchedAt;
    const canWatch = timePassed >= oneHourInMs;
    
    console.log('‚è∞ [WatchedVideosContext] Ïû¨ÏãúÏ≤≠ Í∞ÄÎä• Ïó¨Î∂Ä Ï≤¥ÌÅ¨:', {
      videoId,
      watchedAt: info.watchedAt,
      timePassed: Math.floor(timePassed / 1000 / 60), // Î∂Ñ Îã®ÏúÑ
      canWatch
    });
    
    return canWatch;
  };

  // Ïû¨ÏãúÏ≤≠ Í∞ÄÎä•ÍπåÏßÄ ÎÇ®ÏùÄ ÏãúÍ∞Ñ (Î∂Ñ Îã®ÏúÑ)
  const getTimeUntilRewatch = (videoId) => {
    const info = watchedMap[videoId];
    if (!info || !info.certified || !info.watchedAt) {
      return 0; // ÏãúÏ≤≠Ìïú Ï†Å ÏóÜÏúºÎ©¥ 0Î∂Ñ
    }
    
    const oneHourInMs = 60 * 60 * 1000;
    const timePassed = Date.now() - info.watchedAt;
    const remainingMs = oneHourInMs - timePassed;
    
    if (remainingMs <= 0) {
      return 0; // Ïù¥ÎØ∏ Ïû¨ÏãúÏ≤≠ Í∞ÄÎä•
    }
    
    const remainingMinutes = Math.ceil(remainingMs / 1000 / 60); // Î∂Ñ Îã®ÏúÑÎ°ú Ïò¨Î¶º
    
    console.log('‚è±Ô∏è [WatchedVideosContext] Ïû¨ÏãúÏ≤≠ÍπåÏßÄ ÎÇ®ÏùÄ ÏãúÍ∞Ñ:', {
      videoId,
      remainingMinutes,
      remainingMs
    });
    
    return remainingMinutes;
  };

  // ÏãúÏ≤≠ ÏôÑÎ£åÎêú ÏòÅÏÉÅ Ï§ë 1ÏãúÍ∞ÑÏù¥ ÏßÄÎÇòÏßÄ ÏïäÏùÄ ÏòÅÏÉÅÎì§ ÌïÑÌÑ∞ÎßÅ
  const getRecentlyWatchedVideos = () => {
    const recentlyWatched = [];
    Object.keys(watchedMap).forEach(videoId => {
      const info = watchedMap[videoId];
      if (info && info.certified && !canRewatch(videoId)) {
        recentlyWatched.push({
          videoId,
          timeUntilRewatch: getTimeUntilRewatch(videoId)
        });
      }
    });
    return recentlyWatched;
  };

  const value = {
    watchedMap,
    getWatchInfo,
    incrementWatchCount,
    setCertified,
    canRewatch,
    getTimeUntilRewatch,
    getRecentlyWatchedVideos,
  };

  return (
    <WatchedVideosContext.Provider value={value}>
      {children}
    </WatchedVideosContext.Provider>
  );
}; 