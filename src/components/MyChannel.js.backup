import React, { useEffect, useState, useRef } from "react";
import { auth, db, storage } from "../firebase";
import {
  doc,
  getDoc,
  setDoc,
  collection,
  query,
  where,
  getDocs,
} from "firebase/firestore";
import { ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { Link, useNavigate } from "react-router-dom";
// import GoogleAuth from "./GoogleAuth"; // Google OAuth 제거됨
import { useAuth } from '../contexts/AuthContext';
import YouTubeChannelManager from './MyChannel/YouTubeChannelManager';

function MyChannel() {
  const { currentUser, logout, tempLogin, loading, isAuthenticated } = useAuth();
  const user = currentUser;
  const [profile, setProfile] = useState({
    nickname: "",
    profileImage: "",
    email: user?.email || "",
    uid: user?.uid || "",
    point: 0,
    channelLink: "",
  });
  const [newNickname, setNewNickname] = useState("");
  const [imageFile, setImageFile] = useState(null);
  const [previewUrl, setPreviewUrl] = useState("");
  const [newChannelLink, setNewChannelLink] = useState("");
  const [myRooms, setMyRooms] = useState([]);
  const [myRoomInfos, setMyRoomInfos] = useState([]);
  const [saving, setSaving] = useState(false);
  const [myMessages, setMyMessages] = useState([]);
  const [myVideosData, setMyVideosData] = useState([]);
  const fileInputRef = useRef();
  const nicknameInputRef = useRef();
  const [isEditingNickname, setIsEditingNickname] = useState(false);
  const navigate = useNavigate();

  // 유저 정보 불러오기
  useEffect(() => {
    if (!user) return;
    const fetchProfile = async () => {
      const docRef = doc(db, "users", user.uid);
      const docSnap = await getDoc(docRef);
      if (docSnap.exists()) {
        setProfile({
          ...profile,
          ...docSnap.data(),
        });
        setNewNickname(docSnap.data().nickname || "");
        setPreviewUrl(docSnap.data().profileImage || "");
        setNewChannelLink(docSnap.data().channelLink || "");
      }
    };
    fetchProfile();
    // eslint-disable-next-line
  }, [user]);

  // 내가 등록한 영상이 있는 방 roomId 리스트 구하기
  useEffect(() => {
    if (!user) return;
    const fetchMyRooms = async () => {
      const q = query(collection(db, "chatRooms"));
      const roomSnap = await getDocs(q);
      let roomIds = [];
      for (const roomDoc of roomSnap.docs) {
        const roomId = roomDoc.id;
        const videoQ = query(
          collection(db, "chatRooms", roomId, "videos"),
          where("registeredBy", "==", user.uid)
        );
        const videoSnap = await getDocs(videoQ);
        if (!videoSnap.empty) {
          roomIds.push(roomId);
        }
      }
      setMyRooms(roomIds);
    };
    fetchMyRooms();
  }, [user]);

  // 방 정보 가져오기
  useEffect(() => {
    if (myRooms.length === 0) {
      setMyRoomInfos([]);
      return;
    }
    const fetchRoomInfos = async () => {
      let infos = [];
      for (const roomId of myRooms) {
        const docRef = doc(db, "chatRooms", roomId);
        const docSnap = await getDoc(docRef);
        if (docSnap.exists()) {
          infos.push({ id: roomId, ...docSnap.data() });
        }
      }
      setMyRoomInfos(infos);
    };
    fetchRoomInfos();
  }, [myRooms]);

  // 내 메시지/참여방 불러오기
  useEffect(() => {
    if (!user) return;
    const fetchMyMessages = async () => {
      // 모든 채팅방의 messages에서 내 uid로 쓴 메시지 가져오기
      const q = query(
        collection(db, "chatRooms"),
        where("members", "array-contains", user.uid)
      );
      const querySnapshot = await getDocs(q);
      const msgs = [];
      const roomSet = new Set();
      querySnapshot.forEach((doc) => {
        const data = doc.data();
        // roomId 추출 (경로: chatRooms/{roomId}/messages/{msgId})
        const pathParts = doc.ref.path.split("/");
        const roomId = pathParts[1];
        msgs.push({
          id: doc.id,
          roomId,
          ...data,
        });
        roomSet.add(roomId);
      });
      // 최신순 정렬
      msgs.sort((a, b) => (b.createdAt?.seconds || 0) - (a.createdAt?.seconds || 0));
      setMyMessages(msgs);
    };
    fetchMyMessages();
  }, [user]);

  // 내 영상별 풀시청자 수 계산
  const fetchMyVideosData = async () => {
    if (!user) return;

    try {
      const videosData = [];

      // 모든 채팅방에서 내 영상들을 찾음
      for (const room of myRoomInfos) {
        const videosRef = collection(db, 'chatRooms', room.id, 'videos');
        const snapshot = await getDocs(videosRef);

        for (const doc of snapshot.docs) {
          const videoData = doc.data();
          
          // 내가 등록한 영상인지 확인
          const isMyVideo = videoData.registeredBy === user.uid || 
                           (profile.channelId && videoData.channelId === profile.channelId);
          
          if (isMyVideo) {
            // 해당 영상의 풀시청자 수 계산
            const viewsRef = collection(db, 'chatRooms', room.id, 'videos', doc.id, 'fullViewers');
            const viewsSnapshot = await getDocs(viewsRef);
            const fullViewersCount = viewsSnapshot.size;

            videosData.push({
              ...videoData,
              id: doc.id,
              roomId: room.id,
              roomName: room.name,
              fullViewersCount
            });
          }
        }
      }

      // 채팅방별로 그룹핑
      const groupedVideos = videosData.reduce((acc, video) => {
        const roomId = video.roomId;
        if (!acc[roomId]) {
          acc[roomId] = {
            roomName: video.roomName,
            roomId: roomId,
            videos: []
          };
        }
        acc[roomId].videos.push(video);
        return acc;
      }, {});

      setMyVideosData(Object.values(groupedVideos));
    } catch (error) {
      console.error('영상 데이터 가져오기 실패:', error);
    }
  };

  // 영상 데이터 로딩
  useEffect(() => {
    if (myRoomInfos.length > 0 && user) {
      fetchMyVideosData();
    }
  }, [myRoomInfos, user, profile]);

  // 이미지 미리보기
  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    setImageFile(file);
    setPreviewUrl(URL.createObjectURL(file));
  };

  // 프로필 저장
  const handleSave = async () => {
    if (!user) return;
    setSaving(true);
    let imageUrl = profile.profileImage;
    if (imageFile) {
      const storageRef = ref(storage, `profileImages/${user.uid}`);
      await uploadBytes(storageRef, imageFile);
      imageUrl = await getDownloadURL(storageRef);
    }
    const userData = {
      nickname: newNickname,
      profileImage: imageUrl,
      email: user.email,
      uid: user.uid,
    };
    await setDoc(doc(db, "users", user.uid), userData, { merge: true });
    setProfile(userData);
    setSaving(false);
    alert("프로필이 저장되었습니다!");
  };

  // 채널 링크 저장
  const handleSaveChannelLink = async () => {
    if (!user) return;
    setSaving(true);
    await setDoc(doc(db, "users", user.uid), { channelLink: newChannelLink }, { merge: true });
    setProfile((prev) => ({ ...prev, channelLink: newChannelLink }));
    setSaving(false);
    alert("채널 링크가 저장되었습니다!");
  };

  // 로그아웃
  const handleLogout = async () => {
    await logout();
    navigate("/");
  };

  // 닉네임 편집 완료 처리
  const handleNicknameSubmit = async () => {
    if (!user) return;
    setSaving(true);
    
    const userData = {
      nickname: newNickname,
      profileImage: profile.profileImage,
      email: user.email,
      uid: user.uid,
    };
    
    await setDoc(doc(db, "users", user.uid), userData, { merge: true });
    setProfile(prev => ({ ...prev, nickname: newNickname }));
    setIsEditingNickname(false);
    setSaving(false);
  };

  // Enter 키나 포커스 아웃 시 저장
  const handleNicknameKeyDown = (e) => {
    if (e.key === 'Enter') {
      handleNicknameSubmit();
    } else if (e.key === 'Escape') {
      setNewNickname(profile.nickname || "");
      setIsEditingNickname(false);
    }
  };

  // 시간 포맷
  function formatTime(timestamp) {
    if (!timestamp) return "";
    const date = timestamp.seconds
      ? new Date(timestamp.seconds * 1000)
      : new Date(timestamp);
    return (
      String(date.getFullYear()) +
      "-" +
      String(date.getMonth() + 1).padStart(2, "0") +
      "-" +
      String(date.getDate()).padStart(2, "0") +
      " " +
      String(date.getHours()).padStart(2, "0") +
      ":" +
      String(date.getMinutes()).padStart(2, "0")
    );
  }

  // 로딩 중 화면
  if (loading) {
    return (
      <div className="min-h-screen bg-blue-50 flex flex-col items-center justify-center pb-24">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mb-4"></div>
        <p className="text-gray-600">로딩 중...</p>
      </div>
    );
  }

  // 로그인이 필요한 화면
  if (!isAuthenticated || !user) {
    return (
      <div className="min-h-screen bg-blue-50 flex flex-col items-center justify-center p-6 pb-24">
        <div className="bg-white rounded-2xl shadow-lg p-8 max-w-md w-full text-center">
          <div className="w-16 h-16 rounded-full bg-blue-100 flex items-center justify-center text-2xl mx-auto mb-4">
            🔒
          </div>
          <h2 className="text-2xl font-bold text-gray-800 mb-4">
            마이채널
          </h2>
          <p className="text-gray-600 mb-6">
            마이채널을 이용하려면 로그인이 필요합니다
          </p>

          {/* 임시 로그인 카드 */}
          <div className="bg-gradient-to-br from-yellow-50 to-orange-50 border border-yellow-200 rounded-xl p-6 mb-6">
            <div className="text-yellow-600 text-2xl mb-3">⚡</div>
            <h3 className="font-bold text-gray-800 mb-2">빠른 체험하기</h3>
            <p className="text-sm text-gray-600 mb-4">
              임시 계정으로 유크라의 모든 기능을 체험해보세요
            </p>
            <button
              onClick={tempLogin}
              className="w-full bg-gradient-to-r from-yellow-500 to-orange-500 text-white py-3 px-6 rounded-lg font-bold hover:from-yellow-600 hover:to-orange-600 transition-all duration-200 shadow-md"
            >
              💨 임시 로그인으로 시작하기
            </button>
          </div>

          {/* 구분선 */}
          <div className="flex items-center my-6">
            <hr className="flex-1 border-gray-300" />
            <span className="px-3 text-gray-400 text-sm">또는</span>
            <hr className="flex-1 border-gray-300" />
          </div>

          {/* 정식 로그인 */}
          <Link
            to="/login"
            className="block w-full bg-blue-500 text-white py-3 px-6 rounded-lg font-bold hover:bg-blue-600 transition-all duration-200 shadow-md"
          >
            📧 이메일로 로그인
          </Link>
        </div>

        {/* 하단 탭바 */}
        <footer className="fixed bottom-0 left-0 w-full bg-white border-t flex justify-around items-center h-16 z-50">
          <Link to="/" className="flex flex-col items-center text-gray-500 hover:text-blue-500">
            <svg xmlns="http://www.w3.org/2000/svg" className="w-6 h-6 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0h6" /></svg>
            <span className="text-xs">홈</span>
          </Link>
          <Link to="/chat" className="flex flex-col items-center text-gray-500 hover:text-blue-500">
            <svg xmlns="http://www.w3.org/2000/svg" className="w-6 h-6 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 8h2a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2v-8a2 2 0 012-2h2m10 0V6a4 4 0 00-8 0v2" /></svg>
            <span className="text-xs">채팅방</span>
          </Link>
          <Link to="/board" className="flex flex-col items-center text-gray-500 hover:text-blue-500">
            <span className="text-xs">게시판</span>
          </Link>
          <Link to="/my" className="flex flex-col items-center text-blue-500">
            <svg xmlns="http://www.w3.org/2000/svg" className="w-6 h-6 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5.121 17.804A13.937 13.937 0 0112 15c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0z" /></svg>
            <span className="text-xs font-bold">마이채널</span>
          </Link>
        </footer>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-blue-50 flex flex-col pb-24">
      {/* 상단 프로필 카드 */}
      <div className="bg-white rounded-2xl shadow p-6 mx-4 mt-6 flex flex-col items-center">
        <div className="w-20 h-20 rounded-full bg-blue-100 flex items-center justify-center text-3xl font-bold text-blue-500 mb-2 overflow-hidden">
          {previewUrl ? (
            <img src={previewUrl} alt="프로필" className="w-full h-full object-cover" />
          ) : (
            profile.nickname?.slice(0, 2) || "CH"
          )}
        </div>
        <input
          type="file"
          accept="image/*"
          className="hidden"
          ref={fileInputRef}
          onChange={handleImageChange}
        />
        <button
          className="text-xs text-blue-500 underline mb-2"
          onClick={() => fileInputRef.current.click()}
        >
          사진 변경
        </button>
        <div className="text-lg font-bold mb-1 flex items-center justify-center gap-2">
          {isEditingNickname ? (
            <input
              ref={nicknameInputRef}
              type="text"
              value={newNickname}
              onChange={(e) => setNewNickname(e.target.value)}
              onKeyDown={handleNicknameKeyDown}
              onBlur={handleNicknameSubmit}
              className="text-lg font-bold text-center bg-transparent border-b-2 border-blue-500 outline-none px-2 py-1 min-w-0"
              placeholder="닉네임 입력"
              maxLength={20}
              autoFocus
            />
          ) : (
            <span>{profile.nickname || user?.displayName || "닉네임 없음"}</span>
          )}
          <button
            onClick={() => {
              if (!isEditingNickname) {
                setIsEditingNickname(true);
                setTimeout(() => {
                  nicknameInputRef.current?.focus();
                  nicknameInputRef.current?.select();
                }, 0);
              }
            }}
            className="text-gray-400 hover:text-blue-500 transition-colors p-1"
            title="닉네임 수정"
          >
            <svg 
              xmlns="http://www.w3.org/2000/svg" 
              className="w-4 h-4" 
              fill="none" 
              viewBox="0 0 24 24" 
              stroke="currentColor"
            >
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth={2} 
                d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" 
              />
            </svg>
          </button>
        </div>
        <div className="text-gray-500 text-sm mb-2">
          {profile.email || user?.email}
          {user?.isTemporaryUser && (
            <span className="ml-2 text-xs bg-yellow-100 text-yellow-700 px-2 py-1 rounded-full">
              임시 계정
            </span>
          )}
          {user?.isEmailUser && (
            <span className="ml-2 text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full">
              인증된 계정
            </span>
          )}
        </div>
        
        <div className="flex gap-4 text-center mb-4">
          <div>
            <div className="font-bold text-blue-600 text-lg">{profile.point || 0}</div>
            <div className="text-xs text-gray-400">포인트</div>
          </div>
        </div>
        <button
          onClick={handleSave}
          disabled={saving}
          className="w-full bg-blue-500 text-white py-2 rounded-lg font-bold hover:bg-blue-600 transition mb-2"
        >
          {saving ? "저장 중..." : "프로필 저장"}
        </button>
        <button
          onClick={handleLogout}
          className="w-full bg-red-100 text-red-600 py-2 rounded-lg font-bold hover:bg-red-200 transition-all duration-200 border border-red-200"
        >
          🚪 로그아웃
        </button>
        {profile.channelLink && (
          <a
            href={profile.channelLink}
            target="_blank"
            rel="noopener noreferrer"
            className="block mt-3 w-full bg-blue-100 text-blue-700 text-center py-2 rounded-lg font-semibold hover:bg-blue-200 transition"
          >
            내 채널 바로가기
          </a>
        )}
      </div>

      {/* YouTube 채널 관리 */}
      <div className="mx-4 mt-6">
        <YouTubeChannelManager />
      </div>

      {/* 내 영상이 있는 채팅방 리스트 */}
      <div className="mt-8 mx-4">
        <div className="flex items-center justify-between mb-2">
          <h3 className="font-bold text-lg">내 영상이 등록된 채팅방</h3>
          <button
            onClick={handleSaveChannelLink}
            className="text-xs text-blue-500 underline"
          >
            채널 링크 수정
          </button>
        </div>
        <input
          type="text"
          value={newChannelLink}
          onChange={(e) => setNewChannelLink(e.target.value)}
          className="w-full border rounded px-3 py-2 mb-4"
          placeholder="유튜브/블로그 등 내 채널 링크"
        />
        {myVideosData.length === 0 ? (
          <div className="text-gray-400 text-center py-8 bg-white rounded-xl shadow">아직 등록한 영상이 있는 채팅방이 없습니다.</div>
        ) : (
          <div className="space-y-4">
            {myVideosData.map((roomGroup) => (
              <div key={roomGroup.roomId} className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                {/* 채팅방 헤더 */}
                <div className="bg-gray-50 border-b border-gray-100 p-3">
                  <div className="flex items-center gap-3">
                    {/* 채팅방 썸네일 */}
                    <div className="w-12 h-12 rounded-lg bg-gradient-to-br from-blue-100 to-purple-100 flex items-center justify-center text-lg font-bold text-gray-700 flex-shrink-0">
                      {roomGroup.roomName?.slice(0, 2).toUpperCase() || 'CH'}
                    </div>
                    
                    {/* 채팅방 정보 */}
                    <div className="flex-1 min-w-0">
                      <h4 className="font-bold text-gray-800 text-base truncate">{roomGroup.roomName}</h4>
                      <p className="text-gray-500 text-sm">{roomGroup.videos.length}개의 영상</p>
                    </div>
                    
                    {/* 입장하기 버튼 */}
                    <button
                      onClick={() => navigate(`/chat/${roomGroup.roomId}`)}
                      className="px-4 py-2 bg-blue-500 text-white text-sm font-semibold rounded-lg hover:bg-blue-600 transition-colors flex-shrink-0"
                    >
                      입장하기
                    </button>
                  </div>
                </div>
                
                {/* 영상 카드들 */}
                <div className="p-3 space-y-2">
                  {roomGroup.videos.map((video) => (
                    <div 
                      key={video.id}
                      className="flex gap-3 p-2 bg-gray-50 rounded-lg hover:bg-blue-50 transition-colors cursor-pointer"
                      onClick={() => navigate(`/chat/${roomGroup.roomId}`)}
                    >
                      {/* 영상 썸네일 */}
                      <div className="w-20 h-12 rounded-md overflow-hidden bg-gray-200 flex-shrink-0">
                        {video.thumbnail ? (
                          <img 
                            src={video.thumbnail} 
                            alt={video.title}
                            className="w-full h-full object-cover"
                          />
                        ) : (
                          <div className="w-full h-full flex items-center justify-center text-gray-400 text-xs">
                            🎬
                          </div>
                        )}
                      </div>
                      
                      {/* 영상 정보 */}
                      <div className="flex-1 min-w-0 flex flex-col justify-center">
                        <h5 className="font-medium text-sm text-gray-800 mb-1" style={{
                          display: '-webkit-box',
                          WebkitLineClamp: 2,
                          WebkitBoxOrient: 'vertical',
                          overflow: 'hidden'
                        }}>
                          {video.title || "제목 없음"}
                        </h5>
                        <div className="flex items-center gap-2 text-xs text-gray-500">
                          <span className="flex items-center gap-1">
                            👥 풀시청자: <span className="font-semibold text-blue-600">{video.fullViewersCount}명</span>
                          </span>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* 하단 탭바 */}
      <footer className="fixed bottom-0 left-0 w-full bg-white border-t flex justify-around items-center h-16 z-50">
        <Link to="/" className="flex flex-col items-center text-gray-500 hover:text-blue-500">
          <svg xmlns="http://www.w3.org/2000/svg" className="w-6 h-6 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0h6" /></svg>
          <span className="text-xs">홈</span>
        </Link>
        <Link to="/chat" className="flex flex-col items-center text-gray-500 hover:text-blue-500">
          <svg xmlns="http://www.w3.org/2000/svg" className="w-6 h-6 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 8h2a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2v-8a2 2 0 012-2h2m10 0V6a4 4 0 00-8 0v2" /></svg>
          <span className="text-xs">채팅방</span>
        </Link>
        <Link to="/board" className="flex flex-col items-center text-gray-500 hover:text-blue-500">
          <span className="text-xs">게시판</span>
        </Link>
        <Link to="/my" className="flex flex-col items-center text-blue-500">
          <svg xmlns="http://www.w3.org/2000/svg" className="w-6 h-6 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5.121 17.804A13.937 13.937 0 0112 15c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0z" /></svg>
          <span className="text-xs font-bold">마이채널</span>
        </Link>
      </footer>
    </div>
  );
}

export default MyChannel;