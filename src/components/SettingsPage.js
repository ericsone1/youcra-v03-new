import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import BottomTabBar from './MyChannel/BottomTabBar';

/**
 * YouCra ÏÑ§Ï†ï ÌéòÏù¥ÏßÄ
 * 1. Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê ÏÑ§Ï†ï Ï†ÄÏû•/Î°úÎìú
 * 2. ÌÜ†Í∏Ä, ÏÑ†ÌÉù, Î≤ÑÌäº ÌòïÌÉúÏùò Í∞ÑÎã®Ìïú UI Ïª¥Ìè¨ÎÑåÌä∏ Ï†úÍ≥µ
 */
function SettingsPage() {
  const navigate = useNavigate();

  // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú Ï¥àÍ∏∞Í∞í Î°úÎìú
  const loadSettings = () => {
    try {
      const stored = localStorage.getItem('youcra_settings');
      if (stored) return JSON.parse(stored);
    } catch (_) {}
    return null;
  };

  const defaultSettings = {
    // ÏïåÎ¶º
    messageNotification: true,
    inviteNotification: true,
    videoNotification: false,
    browserNotification: true,
    // Ï±ÑÌåÖ
    fontSize: 'medium',
    theme: 'light',
    autoDownload: true,
    messagePreview: true,
    // YouTube
    autoPlay: true,
    subscribeNotification: false,
  };

  const [settings, setSettings] = useState(() => ({
    ...defaultSettings,
    ...loadSettings(),
  }));

  // Ï†ÄÏû•
  useEffect(() => {
    localStorage.setItem('youcra_settings', JSON.stringify(settings));
  }, [settings]);

  const handleSettingChange = (key, value) => {
    setSettings((prev) => ({ ...prev, [key]: value }));
  };

  /* ----------  Í∏∞Î≥∏Ï†ÅÏù∏ ÏÑúÎ∏å Ïª¥Ìè¨ÎÑåÌä∏ ---------- */
  const SectionHeader = ({ children }) => (
    <div className="px-4 py-3 bg-gray-100">
      <h2 className="text-sm font-semibold text-gray-600 uppercase tracking-wide">
        {children}
      </h2>
    </div>
  );

  const SettingToggle = ({ label, description, settingKey, icon }) => (
    <div className="flex items-center justify-between py-4 border-b border-gray-100 px-4">
      <div className="flex items-center space-x-3">
        <span className="text-xl">{icon}</span>
        <div>
          <div className="font-medium text-gray-800">{label}</div>
          {description && (
            <div className="text-sm text-gray-500">{description}</div>
          )}
        </div>
      </div>
      <label className="relative inline-flex items-center cursor-pointer">
        <input
          type="checkbox"
          checked={settings[settingKey]}
          onChange={(e) => handleSettingChange(settingKey, e.target.checked)}
          className="sr-only peer"
        />
        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:bg-blue-600 after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:after:translate-x-full peer-checked:after:border-white"></div>
      </label>
    </div>
  );

  const SettingSelect = ({ label, settingKey, options, icon }) => (
    <div className="flex items-center justify-between py-4 border-b border-gray-100 px-4">
      <div className="flex items-center space-x-3">
        <span className="text-xl">{icon}</span>
        <div className="font-medium text-gray-800">{label}</div>
      </div>
      <select
        value={settings[settingKey]}
        onChange={(e) => handleSettingChange(settingKey, e.target.value)}
        className="bg-gray-50 border border-gray-300 text-gray-800 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 p-2"
      >
        {options.map((opt) => (
          <option key={opt.value} value={opt.value}>
            {opt.label}
          </option>
        ))}
      </select>
    </div>
  );

  const SettingButton = ({ label, description, onClick, icon }) => (
    <button
      onClick={onClick}
      className="w-full flex items-center space-x-3 py-4 border-b border-gray-100 px-4 hover:bg-gray-50 transition-colors"
    >
      <span className="text-xl">{icon}</span>
      <div className="flex-1 text-left">
        <div className="font-medium text-blue-600">{label}</div>
        {description && (
          <div className="text-sm text-gray-500">{description}</div>
        )}
      </div>
      <svg
        className="w-5 h-5 text-gray-400"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth={2}
          d="M9 5l7 7-7 7"
        />
      </svg>
    </button>
  );

  /* ----------  ÌôîÎ©¥ ---------- */
  return (
    <div className="min-h-screen bg-gray-50 pb-32 max-w-md mx-auto">
      {/* Ìó§Îçî */}
      <div className="bg-white shadow-sm sticky top-0 z-10">
        <div className="flex items-center justify-between p-4">
          <button
            onClick={() => navigate(-1)}
            className="flex items-center text-gray-600 hover:text-gray-800"
          >
            <svg
              className="w-6 h-6"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M15 19l-7-7 7-7"
              />
            </svg>
          </button>
          <h1 className="text-lg font-bold text-gray-800">ÏÑ§Ï†ï</h1>
          <div className="w-6" />
        </div>
      </div>

      <div className="bg-white mt-2">
        {/* ÌîÑÎ°úÌïÑ */}
        <SectionHeader>ÌîÑÎ°úÌïÑ Í¥ÄÎ¶¨</SectionHeader>
        <SettingButton
          icon="üë§"
          label="ÌîÑÎ°úÌïÑ Ìé∏Ïßë"
          description="ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ, ÎãâÎÑ§ÏûÑ Î≥ÄÍ≤Ω"
          onClick={() => navigate('/my')}
        />

        {/* ÏïåÎ¶º ÏÑ§Ï†ï */}
        <SectionHeader>ÏïåÎ¶º ÏÑ§Ï†ï</SectionHeader>
        <SettingToggle
          icon="üí¨"
          label="ÏÉà Î©îÏãúÏßÄ ÏïåÎ¶º"
          settingKey="messageNotification"
          description="Ï±ÑÌåÖÎ∞© ÏÉà Î©îÏãúÏßÄ ÏïåÎ¶º"
        />
        <SettingToggle
          icon="üìß"
          label="Ï±ÑÌåÖÎ∞© Ï¥àÎåÄ ÏïåÎ¶º"
          settingKey="inviteNotification"
          description="Ï±ÑÌåÖÎ∞© Ï¥àÎåÄ Ïãú ÏïåÎ¶º"
        />
        <SettingToggle
          icon="üì∫"
          label="YouTube ÏòÅÏÉÅ ÏïåÎ¶º"
          settingKey="videoNotification"
          description="Í≥µÏú†Îêú YouTube ÏòÅÏÉÅ ÏïåÎ¶º"
        />
        <SettingToggle
          icon="üåê"
          label="Î∏åÎùºÏö∞Ï†Ä Ìë∏Ïãú ÏïåÎ¶º"
          settingKey="browserNotification"
        />

        {/* Ï±ÑÌåÖ ÏÑ§Ï†ï */}
        <SectionHeader>Ï±ÑÌåÖ ÏÑ§Ï†ï</SectionHeader>
        <SettingSelect
          icon="üî§"
          label="Í∏ÄÍº¥ ÌÅ¨Í∏∞"
          settingKey="fontSize"
          options={[
            { value: 'small', label: 'ÏûëÍ≤å' },
            { value: 'medium', label: 'Î≥¥ÌÜµ' },
            { value: 'large', label: 'ÌÅ¨Í≤å' },
          ]}
        />
        <SettingSelect
          icon="üé®"
          label="ÌÖåÎßà"
          settingKey="theme"
          options={[
            { value: 'light', label: 'ÎùºÏù¥Ìä∏' },
            { value: 'dark', label: 'Îã§ÌÅ¨' },
          ]}
        />
        <SettingToggle
          icon="üì∑"
          label="Ïù¥ÎØ∏ÏßÄ ÏûêÎèô Îã§Ïö¥Î°úÎìú"
          settingKey="autoDownload"
        />
        <SettingToggle
          icon="üëÅÔ∏è"
          label="Î©îÏãúÏßÄ ÎØ∏Î¶¨Î≥¥Í∏∞"
          settingKey="messagePreview"
        />

        {/* YouTube ÏÑ§Ï†ï */}
        <SectionHeader>YouTube Ïó∞Îèô</SectionHeader>
        <SettingToggle
          icon="‚ñ∂Ô∏è"
          label="ÏòÅÏÉÅ ÏûêÎèôÏû¨ÏÉù"
          settingKey="autoPlay"
        />
        <SettingToggle
          icon="üîî"
          label="Íµ¨ÎèÖ ÏïåÎ¶º"
          settingKey="subscribeNotification"
        />
        <SettingButton
          icon="üîó"
          label="Ï±ÑÎÑê Ïó∞Í≤∞ Í¥ÄÎ¶¨"
          onClick={() => navigate('/my/youtube-channel')}
        />
      </div>

      <BottomTabBar />
    </div>
  );
}

export default SettingsPage;
 